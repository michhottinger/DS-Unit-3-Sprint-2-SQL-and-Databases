# -*- coding: utf-8 -*-
"""Titanic ElephantSQL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJIoc6edyeSAEudhCRiZz5YuDozyG0rr
"""

!pip install psycopg2-binary

import psycopg2
#dir(psycopg2)

#help(psycopg2.connect)

#help(psycopg2.extensions)

#pull from elephant sQL
dbname = 'qwjskjqu'
user = 'qwjskjqu'
password = 'YQlLYu8T8GxVFkIZYuhbbwkYGzeYpDlh'
host = 'otto.db.elephantsql.com'

pg_conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host)

#create cursor
pg_curs = pg_conn.cursor()

pg_curs.execute('SELECT * FROM test_table;')

pg_curs.fetchall()

!wget https://raw.githubusercontent.com/michhottinger/DS-Unit-3-Sprint-2-SQL-and-Databases/master/module2-sql-for-analysis/titanic.csv

import pandas as pd
url = 'titanic.csv'
df = pd.read_csv(url)

df.head(5)

#need to create a titanic table here
create_titanic = 'CREATE TABLE titanic (survived bool, pclass int, name varchar(255), sex varchar(30), age decimal, sibs_aboard int, parent_child int, fare decimal);'
pg_curs = pg_conn.cursor()
pg_curs.execute(create_titanic)

show_tables =  """
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname !='pg_catalog'
AND schemaname !='information_schema';
"""

"""If you have an invalid SQL statement or typo and you get the current transaction aborted method, 
close and reopen conn and curs"""
pg_curs.close() #closed the cursor
pg_conn.commit() #commited changes to database
pg_conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host) #reopened connection
pg_curs = pg_conn.cursor() #reopened the cursor

pg_curs.execute(show_tables)
pg_curs.fetchall()

df_mapped = df.copy()
df_mapped.Survived = df.Survived.apply(lambda x: x == 1)

pg_curs = pg_conn.cursor()
for index, row in df_mapped.iterrows():
    query = """
    INSERT INTO titanic
    (survived, pclass, name, sex, age, sibs_aboard, parent_child, fare)
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
    """
    pg_curs.execute(query, row)

pg_curs.execute('SELECT * from titanic;')
pg_curs.fetchall()

pg_curs.close()
pg_conn.commit()
pg_curs = pg_conn.cursor()
pg_curs.execute('SELECT * FROM titanic;')
pg_name = pg_curs.fetchall()

pg_name[0]

for name, pg_name in zip(df_mapped, pg_curs):
  assert name == pg_name